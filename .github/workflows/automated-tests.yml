name: Automated tests

on:
  push:
    branches:
      - v*
      - development
      - wip/*
  pull_request: ~

jobs:
  tests:
    name: 'Python ${{ matrix.python-version }}'
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Don't run forever when stale
    strategy:
      matrix:
        python-version:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
    env:
      # Do not log verbosely
      DSMRREADER_LOGLEVEL: ERROR
      # This version will check some generic stuff that should not differ among Python versions
      MAIN_PYTHON_VERSION: '3.9'
    services:
      postgres:
        image: 'postgres:12-alpine'
        ports:
          - 5432
        env:
            POSTGRES_USER: root
            POSTGRES_DB: test_dsmrreader
            POSTGRES_PASSWORD: testpasswd
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 1s --health-retries 10

      mysql:
        image: 'mysql:5.7'
        ports:
          - 3306
        env:
            MYSQL_DATABASE: test_dsmrreader
            MYSQL_ALLOW_EMPTY_PASSWORD: yes
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=1s --health-retries=10
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install APT dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext libgettextpo-dev libmariadb-dev-compat libmariadb-dev

      - name: Cached dependencies & virtualenv
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry/
            ~/dsmr-reader/dsmr-reader/.venv
          key: dependencies-update-check-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip poetry
          poetry config virtualenvs.in-project true
          poetry check
          poetry install

      - name: Check pylama (only checked on main version)
        if: ${{ matrix.python-version == env.MAIN_PYTHON_VERSION }}
        run: poetry run pylama

      - name: Check autopep8 (only checked on main version)
        if: ${{ matrix.python-version == env.MAIN_PYTHON_VERSION }}
        run: poetry run autopep8 -r . --diff --exit-code

      - name: Check translation status (only checked on main version)
        if: ${{ matrix.python-version == env.MAIN_PYTHON_VERSION }}
        run: poetry run sphinx-intl stat | grep -v "0 fuzzy, 0 untranslated" | grep -v changelog.po

      - name: Run SQLite tests
        run: poetry run py.test --cov --cov-report=xml
        env:
            DJANGO_SETTINGS_MODULE: dsmrreader.config.test
            DJANGO_SECRET_KEY: non-production-value
            DJANGO_DATABASE_ENGINE: django.db.backends.sqlite3

      - name: Run PostgreSQL tests (only checked on main version)
        if: ${{ matrix.python-version == env.MAIN_PYTHON_VERSION }}
        run: poetry run py.test
        env:
            DJANGO_SETTINGS_MODULE: dsmrreader.config.test
            DJANGO_SECRET_KEY: unsafe-test-value
            DJANGO_DATABASE_ENGINE: django.db.backends.postgresql
            DJANGO_DATABASE_HOST: 127.0.0.1
            DJANGO_DATABASE_PORT: '${{ job.services.postgres.ports[5432] }}'
            DJANGO_DATABASE_NAME: test_dsmrreader
            DJANGO_DATABASE_USER: root
            DJANGO_DATABASE_PASSWORD: testpasswd

      - name: Run MySQL tests (only checked on main version)
        if: ${{ matrix.python-version == env.MAIN_PYTHON_VERSION }}
        run: poetry run py.test
        env:
            DJANGO_SETTINGS_MODULE: dsmrreader.config.test
            DJANGO_SECRET_KEY: unsafe-test-value
            DJANGO_DATABASE_ENGINE: django.db.backends.mysql
            DJANGO_DATABASE_HOST: 127.0.0.1
            DJANGO_DATABASE_PORT: '${{ job.services.mysql.ports[3306] }}'
            DJANGO_DATABASE_NAME: dsmrreader  # NOT a typo, django prefixes "test_" automatically.
            DJANGO_DATABASE_USER: root
            DJANGO_DATABASE_PASSWORD: ''

      - name: Code coverage upload (only checked on main version)
        if: ${{ matrix.python-version == env.MAIN_PYTHON_VERSION }}
        uses: codecov/codecov-action@v1

      # (requirements.txt) check - Ensures it's in sync with Poetry - Required until Poetry-only support (if ever)
      - name: Install Pip dependencies (only checked on main version)
        if: ${{ matrix.python-version == env.MAIN_PYTHON_VERSION }}
        run: |
          poetry run pip install -r $GITHUB_WORKSPACE/dsmrreader/provisioning/requirements/base.txt
          poetry run pip install -r $GITHUB_WORKSPACE/dsmrreader/provisioning/requirements/dev.txt

      - name: Check for Pip dependency updates, using Poetry venv (only checked on main version)
        # The pip and packaging updates are to prevent false positives
        if: ${{ matrix.python-version == env.MAIN_PYTHON_VERSION }}
        run: |
          poetry run pip install --upgrade pip packaging
          poetry update --dry-run --no-ansi | grep "Package operations: 0 installs, 0 updates, 0 removals" && exit 0

          poetry update --dry-run | grep -v "Skipped"
          exit 1
